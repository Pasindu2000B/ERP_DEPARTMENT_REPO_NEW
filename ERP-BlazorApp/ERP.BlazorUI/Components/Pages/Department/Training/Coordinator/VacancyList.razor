@page "/vacancies"

@using System.Net.Http.Json
@using ERP.BlazorUI.Components.Pages.Department.Training.DTO
@using MudBlazor
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (_vacancies != null && _vacancies.Count > 0)
{
    <MudTable Items="@_vacancies">
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Company</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Company">@context.Company</MudTd>
            <MudTd DataLabel="Actions">
                <div class="button-group" style="@buttonGroupStyle">
                    <MudFab Color="Color.Info" OnClick="@(() => NavigateToView(context.Id))"
                            StartIcon="@Icons.Material.Filled.Visibility" Size="Size.Small" />
                    <MudFab Color="Color.Primary" OnClick="@(() => NavigateToEdit(context.Id))"
                            StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                    <MudFab Color="Color.Warning" OnClick="@(() => ConfirmDelete(context.Id))"
                            StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private List<InternshipVacancyResponse> _vacancies = new List<InternshipVacancyResponse>();
    private string buttonGroupStyle = "display: flex; gap: 8px;";
    private HttpClient Http = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _vacancies = await Http.GetFromJsonAsync<List<InternshipVacancyResponse>>("https://localhost:7270/api/InternshipVacancy/Get");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to load vacancies.", Severity.Error);
        }
    }

    private void NavigateToView(Guid vacancyId)
    {
        NavigationManager.NavigateTo($"/vacancies/view/{vacancyId}");
    }

    private void NavigateToEdit(Guid vacancyId)
    {
        NavigationManager.NavigateTo($"/vacancies/edit/{vacancyId}");
    }

    private async Task ConfirmDelete(Guid vacancyId)
    {
        if (await JsConfirm("Are you sure you want to delete this internship vacancy?"))
        {
            await DeleteVacancy(vacancyId);
        }
    }

    private async Task DeleteVacancy(Guid vacancyId)
    {
        var response = await Http.DeleteAsync($"https://localhost:7270/api/InternshipVacancy/{vacancyId}");
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Internship vacancy deleted successfully.", Severity.Success);
            _vacancies = await Http.GetFromJsonAsync<List<InternshipVacancyResponse>>("https://localhost:7270/api/InternshipVacancy/Get");
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Connection error. Internship vacancy is not deleted.", Severity.Error);
        }
    }

    [Inject] IJSRuntime JsRuntime { get; set; }

    private async Task<bool> JsConfirm(string message)
    {
        return await JsRuntime.InvokeAsync<bool>("confirm", message);
    }
}
