@page "/loginTrain"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime


<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<div>
    <label>Username:</label>
    <input @bind="email" />
</div>
<div>
    <label>Password:</label>
    <input type="password" @bind="password" />
</div>
<MudButton  OnClick="@(async () => await HandleLogin())" Variant="Variant.Filled" Color="Color.Primary">
  
</MudButton>

@code {
    private string email;
    private string password;
    private string errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;

        var response = await Http.PostAsJsonAsync("https://localhost:7010/api/Auth/login", new { email, password });

        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "jwtToken", token);
            AuthenticationStateProvider.MarkUserAsAuthenticated(token);
            Navigation.NavigateTo("/dashBoard");
        }
        else
        {
            errorMessage = "Login failed. Please check your username and password.";
        }
    }
}
