@using System.Net.Http.Json
@using MudBlazor
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (_internshipVacancies.Count > 0)
{
    <MudTable Items="@_internshipVacancies">
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Company</MudTh>
            <MudTh>Created Date</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Company">@context.Company</MudTd>
            <MudTd DataLabel="CreatedDate">@context.CreatedDate.ToString("yyyy-MM-dd")</MudTd>
            <MudTd DataLabel="Actions">
                <div class="button-group" style="@buttonGroupStyle">
                    <MudFab Color="Color.Secondary" OnClick="@(async () => await ShowVacancy(context.Id))"
                            StartIcon="@Icons.Material.Filled.Info" Size="Size.Small" />
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
else
{
    <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

<MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Are you sure you want to delete this internship vacancy?
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    private string buttonGroupStyle = "display: flex; gap: 8px;";

    private HttpClient Http = new HttpClient();

    MudMessageBox mbox { get; set; }

    public EventCallback onDelete { get; set; }

    private List<InternshipVacancy> _internshipVacancies = new List<InternshipVacancy>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _internshipVacancies = await Http.GetFromJsonAsync<List<InternshipVacancy>>("https://localhost:7270/api/InternshipVacancy/Get");
        }
        catch (Exception ex)
        {
            _internshipVacancies = null;
            Snackbar.Add("Failed to load internship vacancies.", Severity.Error);
        }
    }

    private async Task ShowVacancy(Guid vacancyId)
    {
        var parameters = new DialogParameters { { "VacancyId", vacancyId } };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                Position = DialogPosition.Center,
                CloseOnEscapeKey = true,
                CloseButton = true
            };

        var dialog = DialogService.Show<Coordinator.InternshipVacancyProfileDialog>("Vacancy Profile", parameters, options);
        await dialog.Result;
    }

   
    public class InternshipVacancy
    {
        public Guid Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public string Company { get; set; }
        public DateTime CreatedDate { get; set; }
        public DateTime ModifiedDate { get; set; }
    }
}

